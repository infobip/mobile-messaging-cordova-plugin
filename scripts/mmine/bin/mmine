#!/usr/bin/env ruby

require 'optionparser'
require 'mmine'

# puts "Enter main target name:"
# main_target_name = gets.chomp
# main_target_name = 'nescript'

# puts "Enter App Group Id:"
# app_group = gets.chomp
# app_group = 'group.com.mobile-messaging.notification-service-extension'

# puts "Enter .xcodeproj file path"
# project_file_path = gets.chomp
# project_file_path = '/Users/andreykadochnikov/nescript/nescript.xcodeproj'

first_arg, *the_rest = ARGV

options = {}
integrate_parse = OptionParser.new do |opts|
    opts.banner = "Usage: mmine [command] [parameters]"
    opts.on("-c", "--application-code APP_CODE", "Your Push Application Code from Infobip Portal") do |app_code|
        options[:"application-code"] = app_code
    end
    opts.on("-p", "--project XCODE_PROJECT", "Path for your Xcode project file (.xcodeproj)") do |project|
        options[:project] = project
    end
    opts.on("-g", "--app-group APP_GROUP_ID", "App Group Id for your shared location. You generate it here firs: https://developer.apple.com/account/ios/identifier/applicationGroup. For more inforamtion see https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW19") do |app_group|
        options[:"app-group"] = app_group
    end
    opts.on("-t", "--target MAIN_TARGET", "Name of main Xcode project target") do |target|
        options[:target] = target
    end
    opts.on("-h", "--help", "Prints this help") do
        puts opts
        exit
    end
end

case first_arg
when "integrate"
    begin
        integrate_parse.parse!
        mandatory = [:"application-code",:"project", :"app-group", :"target"]
        missing = mandatory.select{ |param| options[param].nil? }
        unless missing.empty?
            raise OptionParser::MissingArgument.new(missing.join(', '))
        end  
        NotificationExtensionIntegrator.new(options[:"application-code"], options[:project], options[:"app-group"], options[:target]).setupNotificationExtension()
    rescue OptionParser::InvalidOption, OptionParser::MissingArgument
        puts $!.to_s
        puts integrate_parse
        exit
    end 
else
    if first_arg == nil
        puts "Please specify a command. For example 'mmine integrate'"
    else
        puts "Unknown command: #{first_arg}"
    end
end

